name: Release

on:
  push:
    tags:
      - v*

permissions:
  contents: write
  id-token: write

jobs:
  make-draft-release:
    name: make draft release

    permissions: write-all

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if package version matches
        run: test "${GITHUB_REF_NAME}" = "v$(jq -r .version freelens/package.json)"

      - name: Create draft release
        if: github.ref_name == 'main' && github.event_name != 'pull_request'
        run: gh release create ${GITHUB_REF_NAME} --draft --title "Release ${GITHUB_REF_NAME}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-app:
    name: build app

    permissions:
      contents: write

    needs:
      - make-draft-release

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: arm64
          - os: ubuntu-latest
            arch: x64
          - os: macos-latest
            arch: arm64
          - os: macos-latest
            arch: x64
          - os: windows-latest
            arch: x64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Get npm cache directory
        shell: bash
        run: echo "npm_cache_dir=$(npm config get cache)" >> ${GITHUB_ENV}

      - uses: actions/cache@v4
        id: npm-cache
        with:
          path: ${{ env.npm_cache_dir }}
          key: ${{ matrix.os }}-${{ matrix.arch }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.arch }}-node-

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_on: error
          command: sudo apt-get install -y --no-install-recommends gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_on: error
          command: brew install python-setuptools

      - name: Install NPM dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_on: error
          command: npm ci

      - name: Rebuild for arm64 (macOS, Linux)
        if: runner.os != 'Windows'
        run: |
          if [[ ${{ runner.os }} == Linux && ${{ matrix.arch }} == arm64 ]]; then
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
          fi
          npm run rebuild -- -- -a ${{ matrix.arch }}

      - name: Build
        run: npm run build
        env:
          DOWNLOAD_ALL_ARCHITECTURES: "${{ runner.os != 'Windows' }}"

      - name: Build Electron app (macOS)
        if: runner.os == 'macOS'
        run:
          for var in APPLEID APPLEIDPASS APPLETEAMID CSC_LINK CSC_KEY_PASSWORD; do test -n "${!var}" || unset $var; done;
          npm run build:app -- -- -- dmg --publish never --${{ matrix.arch }}
        env:
          APPLEID: ${{ secrets.APPLEID }}
          APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
          APPLETEAMID: ${{ secrets.APPLETEAMID }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}

      - name: Build Electron app (Linux)
        if: runner.os == 'Linux'
        run: npm run build:app -- -- -- AppImage deb rpm --publish never --${{ matrix.arch }}

      - name: Build Electron app (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run:
          for var in CSC_LINK CSC_KEY_PASSWORD; do test -n "${!var}" || unset $var; done;
          npm run build:app -- -- -- nsis --publish never --${{ matrix.arch }}
        env:
          CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}

      - name: Tweak binaries before upload
        shell: bash
        run: |
          find . -name '*pty.node' -print0 | xargs -0 file
          cd freelens/dist
          rm -f *.blockmap
          find . -name '*.dmg' ! -name '*-arm64.dmg' ! -name '*-amd64.dmg' | while read -r f; do
            mv -f "$f" "${f%.dmg}-amd64.dmg"
          done
          find . -name '*Setup*' | while read -r f; do
            mv -f "$f" "${f/ Setup /-}"
          done

      - name: Upload binaries
        if: github.ref_name == 'main' && github.event_name != 'pull_request'
        shell: bash
        run: |
          gh release upload ${GITHUB_REF_NAME} freelens/dist/Freelens*.*
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-github-release:
    name: publish GitHub release

    needs:
      - make-draft-release
      - build-app

    permissions:
      contents: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Publish GitHub release
        if: github.ref_name == 'main' && github.event_name != 'pull_request'
        run: gh release edit ${GITHUB_REF_NAME} --draft=false
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-npm-release:
    name: publish NPM release

    needs:
      - make-draft-release
      - build-app
      - publish-github-release

    permissions:
      contents: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          registry-url: https://registry.npmjs.org

      - name: Get NPM cache directory
        shell: bash
        run: echo "npm_cache_dir=$(npm config get cache)" >> ${GITHUB_ENV}

      - uses: actions/cache@v4
        id: npm-cache
        with:
          path: ${{ env.npm_cache_dir }}
          key: ${{ matrix.os }}-${{ matrix.arch }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.arch }}-node-

      - name: Install NPM dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_on: error
          command: npm ci

      - name: Build NPM packages
        run: npm run build

      - name: Reset Git working directory
        run: git reset --hard

      - name: Publish NPM packages
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_on: error
          command: |
            case "${GITHUB_REF_NAME}" in
              *-*) dist_tag=next;;
              *) dist_tag=latest;;
            esac
            npx lerna \
              publish from-package \
              --no-push \
              --no-git-tag-version \
              --yes \
              --dist-tag ${dist_tag}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
