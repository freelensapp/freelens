name: Integration tests

on:
  push:
    branches-ignore:
      - automated/*
      - renovate/*
  pull_request:
    branches:
      - main
  workflow_dispatch: {}

permissions:
  contents: read

env:
  minikube_version: 1.35.0 # datasource=github-releases depName=kubernetes/minikube

jobs:
  test-integration:
    name: integration tests on ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            arch: x64
            targets: AppImage deb rpm
          - os: macos-14
            arch: arm64
            targets: dmg pkg
          - os: windows-2022
            arch: x64
            targets: msi nsis

    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    env:
      ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
      ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
      PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/.cache/playwright

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_on: any
          command: brew install python-setuptools

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_on: any
          command: choco install yq --yes --no-progress

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Get npm cache directory
        shell: bash
        run: echo "npm_cache_dir=$(npm config get cache)" >> ${GITHUB_ENV}

      - name: Get Electron version
        shell: bash
        run: echo "electron_version=$(yq -r '.packages["node_modules/electron"].version' package-lock.json)" >> $GITHUB_ENV

      - name: Get Electron Builder version
        shell: bash
        run: echo "electron_builder_version=$(yq -r '.packages["packages/core/node_modules/electron-builder"].version' package-lock.json)" >> $GITHUB_ENV

      - name: Get Playwright version
        shell: bash
        run: echo "playwright_version=$(yq -r '.packages["node_modules/playwright"].version' package-lock.json)" >> $GITHUB_ENV

      - name: Get Kubernetes version (Linux)
        if: runner.os == 'Linux'
        run: echo "kubernetes_version=$(yq -r .config.bundledKubectlVersion freelens/package.json)" >> $GITHUB_ENV

      - name: Use npm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.npm_cache_dir }}
          key: ${{ matrix.os }}-${{ matrix.arch }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.arch }}-node-

      - name: Use Electron cache
        uses: actions/cache@v4
        with:
          path: ${{ env.ELECTRON_CACHE }}
          key: ${{ matrix.os }}-${{ matrix.arch }}-electron-${{ env.electron_version }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.arch }}-electron-

      - name: Use Electron Builder cache
        uses: actions/cache@v4
        with:
          path: ${{ env.ELECTRON_BUILDER_CACHE }}
          key: ${{ matrix.os }}-${{ matrix.arch }}-electron-builder-${{ env.electron_builder_version }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.arch }}-electron-builder-

      - name: Use Playwright cache
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ matrix.os }}-${{ matrix.arch }}-playwright-${{ env.playwright_version }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.arch }}-playwright-

      - name: Install minikube (Linux)
        if: runner.os == 'Linux'
        uses: manusa/actions-setup-minikube@v2.13.1
        with:
          minikube version: v${{ env.minikube_version }}
          kubernetes version: v${{ env.kubernetes_version }}
          github token: ${{ secrets.GITHUB_TOKEN }}
          driver: docker

      - name: Install npm dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_on: any
          command: npm ci
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "1"

      - name: Put $HOME in env (Windows)
        if: runner.os == 'windows'
        run: echo "HOME=$HOME" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install Playwright with dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Install Playwright's dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps

      - name: Build npm packages (macOS x64, Linux arm64)
        if: runner.os == 'macOS' && matrix.arch == 'x64' || runner.os == 'Linux' && matrix.arch == 'arm64'
        run: npm run build
        env:
          DOWNLOAD_ALL_ARCHITECTURES: "true"

      - name: Build npm packages (macOS arm64, Linux x64, Windows)
        if: runner.os == 'macOS' && matrix.arch == 'arm64' || runner.os == 'Linux' && matrix.arch == 'x64' || runner.os == 'Windows'
        run: npm run build

      - name: Build Electron app
        run: npm run build:app -- -- -- dir ${{ matrix.targets }} --${{ matrix.arch }}

      - name: Run integration tests (Linux)
        if: runner.os == 'Linux'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 15
          max_attempts: 3
          retry_on: timeout
          command: |
            sudo chown root:root freelens/dist/linux-unpacked/chrome-sandbox
            sudo chmod 4755 freelens/dist/linux-unpacked/chrome-sandbox
            xvfb-run -a npm run test:integration
        env:
          DEBUG: pw:browser

      - name: Run integration tests (macOS, Windows)
        if: runner.os != 'Linux'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 15
          max_attempts: 3
          retry_on: timeout
          command: npm run test:integration
        env:
          DEBUG: pw:browser

      - name: Clean after tests
        run: npm run clean

      - name: Check untracked files
        shell: bash
        run: for f in $(git ls-files --others --exclude-standard); do git diff --no-index --stat --exit-code /dev/null $f; done
