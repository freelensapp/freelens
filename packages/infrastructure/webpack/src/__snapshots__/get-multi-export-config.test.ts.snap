// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`get-multi-export-config given maximal package.json, when creating configuration works 1`] = `
"[
  {
    name: './index.ts',
    entry: { index: './index.ts' },
    target: 'node',
    mode: 'production',
    performance: { maxEntrypointSize: 500000, hints: 'error' },
    resolve: { extensions: [ '.ts', '.tsx', '.js' ] },
    plugins: [
      MakePeerDependenciesExternalPlugin {},
      ProtectFromImportingNonDependencies {},
      ForkTsCheckerWebpackPlugin {
        options: {
          typescript: {
            mode: 'write-dts',
            configOverwrite: {
              include: [ './index.ts' ],
              compilerOptions: {
                declaration: true,
                declarationDir: '/some-working-directory/dist'
              }
            }
          }
        }
      }
    ],
    output: {
      path: '/some-working-directory/dist',
      filename: [Function: filename],
      library: { type: 'commonjs2' }
    },
    optimization: { minimize: false },
    externalsPresets: { node: true },
    externals: [ [Function (anonymous)] ],
    node: { __dirname: true, __filename: true },
    module: { rules: [ { test: /\\.ts(x)?$/, loader: 'ts-loader' } ] }
  },
  {
    name: './some-entrypoint/index.ts',
    entry: { index: './some-entrypoint/index.ts' },
    target: 'node',
    mode: 'production',
    performance: { maxEntrypointSize: 500000, hints: 'error' },
    resolve: { extensions: [ '.ts', '.tsx', '.js' ] },
    plugins: [
      MakePeerDependenciesExternalPlugin {},
      ProtectFromImportingNonDependencies {},
      ForkTsCheckerWebpackPlugin {
        options: {
          typescript: {
            mode: 'write-dts',
            configOverwrite: {
              include: [ './some-entrypoint/index.ts' ],
              compilerOptions: {
                declaration: true,
                declarationDir: '/some-working-directory/dist/some-entrypoint'
              }
            }
          }
        }
      }
    ],
    output: {
      path: '/some-working-directory/dist/some-entrypoint',
      filename: [Function: filename],
      library: { type: 'commonjs2' }
    },
    optimization: { minimize: false },
    externalsPresets: { node: true },
    externals: [ [Function (anonymous)] ],
    node: { __dirname: true, __filename: true },
    module: { rules: [ { test: /\\.ts(x)?$/, loader: 'ts-loader' } ] }
  },
  {
    name: './some-other-entrypoint/index.ts',
    entry: { index: './some-other-entrypoint/index.ts' },
    target: 'node',
    mode: 'production',
    performance: { maxEntrypointSize: 500000, hints: 'error' },
    resolve: { extensions: [ '.ts', '.tsx', '.js' ] },
    plugins: [
      MakePeerDependenciesExternalPlugin {},
      ProtectFromImportingNonDependencies {},
      ForkTsCheckerWebpackPlugin {
        options: {
          typescript: {
            mode: 'write-dts',
            configOverwrite: {
              include: [ './some-other-entrypoint/index.ts' ],
              compilerOptions: {
                declaration: true,
                declarationDir: '/some-working-directory/dist/some-other-entrypoint'
              }
            }
          }
        }
      },
      MiniCssExtractPlugin {
        _sortedModulesCache: WeakMap { <items unknown> },
        options: {
          filename: '[name].css',
          ignoreOrder: false,
          experimentalUseImportModule: undefined,
          runtime: true,
          chunkFilename: '[name].css'
        },
        runtimeOptions: {
          insert: undefined,
          linkType: 'text/css',
          attributes: undefined
        }
      }
    ],
    output: {
      path: '/some-working-directory/dist/some-other-entrypoint',
      filename: [Function: filename],
      library: { type: 'commonjs2' }
    },
    optimization: { minimize: false },
    externalsPresets: { node: true },
    externals: [ [Function (anonymous)] ],
    node: { __dirname: true, __filename: true },
    module: {
      rules: [
        { test: /\\.ts(x)?$/, loader: 'ts-loader' },
        {
          test: /\\.s?css$/,
          use: [
            'miniCssExtractPluginLoader',
            {
              loader: 'css-loader',
              options: {
                sourceMap: false,
                modules: {
                  auto: /\\.module\\./i,
                  mode: 'local',
                  localIdentName: '[name]__[local]--[hash:base64:5]'
                }
              }
            },
            {
              loader: 'postcss-loader',
              options: {
                sourceMap: false,
                postcssOptions: { plugins: [ 'tailwindcss' ] }
              }
            },
            { loader: 'sass-loader', options: { sourceMap: false } }
          ]
        },
        {
          test: /\\.(ttf|eot|woff2?)$/,
          type: 'asset/resource',
          generator: { filename: 'fonts/[name][ext]' }
        },
        { test: /\\.svg$/, type: 'asset/source' },
        {
          test: /\\.(jpg|png|ico)$/,
          type: 'asset/resource',
          generator: { filename: 'images/[name][ext]' }
        }
      ]
    }
  }
]"
`;
